import os
import openai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI
client = openai.OpenAI(
    api_key=os.getenv("IOINTELLIGENCE_API_KEY"),
    base_url="https://api.intelligence.io.solutions/api/v1/",
)


def remove_before_word(text, target_word):
    pos = text.find(target_word)

    if pos != -1:
        return text[pos + len(target_word):].strip()
    else:
        return text


async def handle_rozumakha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é !—Ä–æ–∑—É–º–∞—Ö–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ
    # if update.message.chat.type not in ["group", "supergroup"]:
    #     await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!")
    #     return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    full_text = update.message.text
    print(full_text)
    if full_text.startswith("—Ä–æ–∑"):
        user_prompt = full_text.replace("—Ä–æ–∑", "", 1).strip()

    user_prompt = full_text.replace("—Ä–æ–∑—É–º–∞—Ö–∞", "", 1).strip()

    print(user_prompt)

    if not user_prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø–æ –ª—é–¥—Å—å–∫–∏")
        return

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ "–¥—É–º–∞—é..." –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        thinking_msg = await update.message.reply_text("ü§î –ü—É-–ø—É-–ø—É...")

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI
        response = client.chat.completions.create(
            model="deepseek-ai/DeepSeek-R1-0528",
            messages=[
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.7,
            max_tokens=1000
        )

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è "–¥—É–º–∞—é..."
        ai_response = response.choices[0].message.content
        print(ai_response)
        normalized_response = remove_before_word(ai_response, "</think>")
        await thinking_msg.delete()  # –í–∏–¥–∞–ª—è—î–º–æ "–¥—É–º–∞—é..."
        await update.message.reply_text(normalized_response)

    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏"""
    print(f"Update {update} caused error: {context.error}")
    if update.message:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("Telegram —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    app = Application.builder().token(TOKEN).build()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è !—Ä–æ–∑—É–º–∞—Ö–∞
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^—Ä–æ–∑—É–º–∞—Ö–∞\b'), handle_rozumakha))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^—Ä–æ–∑\b'), handle_rozumakha))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()


if __name__ == "__main__":
    main()
